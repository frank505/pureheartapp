name: iOS TestFlight Deployment

on:
  push:
    branches: 
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  RUBY_VERSION: '3.1'

jobs:
  build-and-deploy:
    runs-on: macos-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install --repo-update

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Configure build number and environment
        run: |
          BUILD_NUMBER=${{ github.run_number }}
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          
          # Determine environment based on branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="production-testflight"
            echo "ENVIRONMENT=production-testflight" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            ENVIRONMENT="development"
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          else
            ENVIRONMENT="development"
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi
          
          echo "Deploying to TestFlight - Environment: $ENVIRONMENT"
          
          # Update Info.plist with new build number
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" ios/PureHeart/Info.plist

      - name: Install Fastlane
        run: |
          cd ios
          gem install fastlane
          bundle init
          echo 'gem "fastlane"' >> Gemfile
          bundle install

      - name: Setup Fastlane Match
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
        run: |
          cd ios
          
          # Configure git authentication using custom Match token
          git config --global url."https://x-access-token:${{ secrets.MATCH_GIT_TOKEN }}@github.com/".insteadOf "https://github.com/"
          
          # Create Fastfile if it doesn't exist
          if [ ! -f "fastlane/Fastfile" ]; then
            mkdir -p fastlane
            cat > fastlane/Fastfile << 'EOF'
          default_platform(:ios)

          platform :ios do
            desc "Fetch certificates and provisioning profiles"
            lane :certificates do
              match(type: "appstore", readonly: true)
            end
            
            desc "Build and upload to TestFlight"
            lane :beta do
              certificates
              build_app(
                workspace: "PureHeart.xcworkspace",
                scheme: "PureHeart",
                configuration: "Release",
                export_method: "app-store",
                export_options: {
                  method: "app-store",
                  uploadBitcode: false,
                  uploadSymbols: true,
                  compileBitcode: false
                }
              )
              upload_to_testflight(
                skip_waiting_for_build_processing: true
              )
            end
          end
          EOF
          fi

      - name: Fetch certificates and build
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        run: |
          cd ios
          
          # Configure git authentication using custom Match token
          git config --global url."https://x-access-token:${{ secrets.MATCH_GIT_TOKEN }}@github.com/".insteadOf "https://github.com/"
          
          fastlane beta

      - name: Upload build artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-logs-fastlane
          path: |
            ios/build/
            ~/Library/Logs/gym/
            ios/fastlane/report.xml
          retention-days: 7
