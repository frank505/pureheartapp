name: Android Release Build

on:
  push:
    branches: 
      - main
      - master
      - develop
      - staging
      - production
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Configure build environment
        run: |
          BUILD_NUMBER=${{ github.run_number }}
          VERSION_NAME=$(cat package.json | grep '"version"' | cut -d'"' -f4)
          
          # Determine environment and deployment strategy based on branch
          if [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
            ENVIRONMENT="production"
            DEPLOY_TO_STORE="true"
            echo "DEPLOY_TO_STORE=true" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            ENVIRONMENT="production-build"
            DEPLOY_TO_STORE="false"
            echo "DEPLOY_TO_STORE=false" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            ENVIRONMENT="staging"
            DEPLOY_TO_STORE="false"
            echo "DEPLOY_TO_STORE=false" >> $GITHUB_ENV
          else
            ENVIRONMENT="development"
            DEPLOY_TO_STORE="false"
            echo "DEPLOY_TO_STORE=false" >> $GITHUB_ENV
          fi
          
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          
          echo "Building Android Release - Environment: $ENVIRONMENT"
          echo "Deploy to Play Store: $DEPLOY_TO_STORE"

      - name: Create keystore from secret
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/release.keystore

      - name: Create key.properties
        run: |
          cat > android/key.properties << EOF
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=release.keystore
          EOF

      - name: Update version code and name
        run: |
          # Update build.gradle with new version code and name
          sed -i "s/versionCode [0-9]*/versionCode $BUILD_NUMBER/" android/app/build.gradle
          sed -i "s/versionName \".*\"/versionName \"$VERSION_NAME\"/" android/app/build.gradle

      - name: Build Android Release
        run: |
          cd android
          ./gradlew assembleRelease

      - name: Sign APK
        run: |
          cd android
          ./gradlew bundleRelease

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: android/app/build/outputs/apk/release/app-release.apk
          retention-days: 30

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release-aab
          path: android/app/build/outputs/bundle/release/app-release.aab
          retention-days: 30

      - name: Upload to Google Play (Production branch only)
        if: github.ref == 'refs/heads/production' || github.event.inputs.environment == 'production'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: ${{ secrets.ANDROID_PACKAGE_NAME }}
          releaseFiles: android/app/build/outputs/bundle/release/app-release.aab
          track: internal
          status: completed

      - name: Notify Slack on Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ✅ Android build successful!
            Environment: ${{ env.ENVIRONMENT }}
            Version: ${{ env.VERSION_NAME }}
            Build: ${{ env.BUILD_NUMBER }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Deployed to Play Store: ${{ env.DEPLOY_TO_STORE }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ Android build failed!
            Environment: ${{ env.ENVIRONMENT }}
            Version: ${{ env.VERSION_NAME }}
            Build: ${{ env.BUILD_NUMBER }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Clean up keystore
        if: always()
        run: |
          rm -f android/app/release.keystore
          rm -f android/key.properties
